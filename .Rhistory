x = c(2,0)
y = c(3,-1)
(p = polyinterp(x, y))
plyinterp = function(x, y)
{
if(length(x) != length(y))
stop("Length of x and y vectors must be the same")
n = length(x) -1
vandermonde = rep(1, length(x))
for(i in 1:n)
{
xi = x^i
vandermonde = cbind(vandermonde, xi)
}
beta = solve(vandermonde, y)
names(beta) = NULL
return(beta)
}
x = c(-1, 1, 0)
y = c(-2, 2, -1)
(p = polyinterp(x, y))
horner(-2, p)
x = c(2,0)
y = c(3,-1)
(p = polyinterp(x, y))
x = c(-3, -1, 3, 1)
y = c(1 - tan(1), 1 - tan(1/2), 1 + tan(1/2), 1)
(p = polyinterp(x, y))
pwiselinterp = fucntion(x,y)
pwiselinterp = function(x,y)
{
n = length(x) - 1
y = y[order(x)]
x = x[order(x)]
mvec = bvec = c()
for(i in 1:n) {
p = linterp(x[i], y[i], x[i+1], y[i+1])
mvec = c(mvec, p[2])
bvec = c(bvec, p[1])
}
}
pwiselinterp = function(x,y)
{
n = length(x) - 1
y = y[order(x)]
x = x[order(x)]
mvec = bvec = c()
for(i in 1:n) {
p = linterp(x[i], y[i], x[i+1], y[i+1])
mvec = c(mvec, p[2])
bvec = c(bvec, p[1])
}
}
x = c(-2, -1, 0, 1)
y = c(-1, -2, -1, 2)
pwiselinterp = function(x,y)
{
n = length(x) - 1
y = y[order(x)]
x = x[order(x)]
mvec = bvec = c()
for(i in 1:n) {
p = linterp(x[i], y[i], x[i+1], y[i+1])
mvec = c(mvec, p[2])
bvec = c(bvec, p[1])
}
}
x = c(-2, -1, 0, 1)
y = c(-1, -2, -1, 2)
pwiselinterp(x, y)
pwiselinterp = function(x,y)
{
n = length(x) - 1
y = y[order(x)]
x = x[order(x)]
mvec = bvec = c()
for(i in 1:n) {
p = linterp(x[i], y[i], x[i+1], y[i+1])
mvec = c(mvec, p[2])
bvec = c(bvec, p[1])
}
return(list(m = mvec, b = bvec))
}
x = c(-2, -1, 0, 1)
y = c(-1, -2, -1, 2)
pwiselinterp(x, y)
pwiselinterp = function(x,y)
{
n = length(x) - 1
y = y[order(x)]
x = x[order(x)]
mvec = bvec = c()
for(i in 1:n) {
p = linterp(x[i], y[i], x[i+1], y[i+1])
mvec = c(mvec, p[2])
bvec = c(bvec, p[1])
}
return(list(m = mvec, b = bvec))
}
x = c(-2, -1, 0, 1)
y = c(-1, -2, -1, 2)
pwiselinterp(x, y)
f = approxfun(x, y)
f(0)
f(.5)
knitr::opts_chunk$set(echo = TRUE)
findiff = function(f, x, h = x*sqrt(.Machine$double.eps)){
return((f(x + h) - f(x))/h)
}
f = function(x) {3 * x - 1}
findiff(f,4, h=1)
findiff(f, 4, h=1e-6)
findiff = function(f, x, h = x*sqrt(.Machine$double.eps)){
return((f(x + h) - f(x))/h)
}
f = function(x) {3 * x - 1}
findiff(f,4, h=1)
findiff(f, 4, h=1e-6)
findiff(sin, pi/4, h=1)
findiff(sin, pi/4, h=.5)
findiff(sin, pi/4, h=.01)
findiff = function(f, x, h = x*sqrt(.Machine$double.eps)){
return((f(x + h) - f(x))/h)
}
f = function(x) {3 * x - 1}
findiff(f,4, h=1)
findiff(f, 4, h=1e-6)
findiff(sin, pi/4, h=1)
findiff(sin, pi/4, h=.5)
findiff(sin, pi/4, h=.01)
findiff(sin, pi/4, h=1e-6)
findiff(sin, pi/4, h=1e-10)
findiff(sin, pi/4, h=1e-14)
findiff(sin, pi/4, h=1e-15)
findiff(sin, pi/4, h=1e-18)
findiff(sin, pi/4)
f = function(x) {x^2 + 3 * x - 4}
findiff(f, 2)
symdiff = function(f, x, h = x * .Machine$double.eps^(1/3)) {
return((f(x+h) - f(x-h))/(2*h))
}
symdiff(sin, pi/4, h=.01)
symdiff(sin, pi/4, h=.001)
symdiff(sin, pi/4, h=.0001)
symdiff(sin, pi/4)
findiff2 = function(f,x,h){
return((f(x+h) - 2 * f(x) + f(x-h)) / h^2)
}
findiff2 = function(f,x,h){
return((f(x+h) - 2 * f(x) + f(x-h)) / h^2)
}
findiff2(sin, pi/4, h = 1e-4)
findiff2(sin,3,h=1e-4)
findiff2 = function(f,x,h){
return((f(x+h) - 2 * f(x) + f(x-h)) / h^2)
}
findiff2(sin, pi/4, h = 1e-4); sin(pi/4)
findiff2(sin,3,h=1e-4); sin(3)
findiff2 = function(f,x,h){
return((f(x+h) - 2 * f(x) + f(x-h)) / h^2)
}
findiff2(sin, pi/4, h = 1e-4); -sin(pi/4)
findiff2(sin,3,h=1e-4); -sin(3)
knitr::opts_chunk$set(echo = TRUE)
bisection = function(f, a, b, tol = 1e-3, m = 100)
{
iter = 0
f.a = f(a)
f.b = f(b)
while(abs(b - a) > tol)
{
iter = iter + 1
if(iter > m)
{
warning("iteration maximum exceeded")
break
}
xmid = (a+b)/2
ymid = f(xmid)
if(f.a * ymid > 0)
{
a = xmid
f.a = ymid
}else{
b = xmid
f.b = ymid
}
}
root = (a+b)/2
return(root)
}
bisection = function(f, a, b, tol = 1e-3, m = 100)
{
iter = 0
f.a = f(a)
f.b = f(b)
while(abs(b - a) > tol)
{
iter = iter + 1
if(iter > m)
{
warning("iteration maximum exceeded")
break
}
xmid = (a+b)/2
ymid = f(xmid)
if(f.a * ymid > 0)
{
a = xmid
f.a = ymid
}else{
b = xmid
f.b = ymid
}
}
root = (a+b)/2
return(root)
}
f = function(x) {x^2 - 1}
bisection(f, .5, 1.25, tol=1e-3)
bisection(f, .5, 1.25, tol=1e-6)
bisection(f, .5, 1.25, tol=1e-9)
bisection = function(f, a, b, tol = 1e-3, m = 100)
{
iter = 0
f.a = f(a)
f.b = f(b)
while(abs(b - a) > tol)
{
iter = iter + 1
if(iter > m)
{
warning("iteration maximum exceeded")
break
}
xmid = (a+b)/2
ymid = f(xmid)
if(f.a * ymid > 0)
{
a = xmid
f.a = ymid
}else{
b = xmid
f.b = ymid
}
}
root = (a+b)/2
return(root)
}
f = function(x) {x^2 - 1}
bisection(f, .5, 1.25, tol=1e-3)
bisection(f, .5, 1.25, tol=1e-6)
bisection(f, .5, 1.25, tol=1e-9)
f = function(x) {x^3 - x}
bisection(f, -1, 1.25, tol=1e-6)
bisection(f, -5, 1.25, tol=1e-6)
bisection(f, -2, 1.25, tol=1e-6)
bisection = function(f, a, b, tol = 1e-3, m = 100)
{
iter = 0
f.a = f(a)
f.b = f(b)
while(abs(b - a) > tol)
{
iter = iter + 1
if(iter > m)
{
warning("iteration maximum exceeded")
break
}
xmid = (a+b)/2
ymid = f(xmid)
if(f.a * ymid > 0)
{
a = xmid
f.a = ymid
}else{
b = xmid
f.b = ymid
}
}
root = (a+b)/2
return(root)
}
f = function(x) {x^2 - 1}
bisection(f, .5, 1.25, tol=1e-3)
bisection(f, .5, 1.25, tol=1e-6)
bisection(f, .5, 1.25, tol=1e-9)
f = function(x){x^3 - x}
bisection(f, -2, 1.25, tol=1e-6)
bisection(f, -5, 1.25, tol=1e-6)
bisection(f, -2, 1.25, tol=1e-6)
bisection = function(f, a, b, tol = 1e-3, m = 100)
{
iter = 0
f.a = f(a)
f.b = f(b)
while(abs(b - a) > tol)
{
iter = iter + 1
if(iter > m)
{
warning("iteration maximum exceeded")
break
}
xmid = (a+b)/2
ymid = f(xmid)
if(f.a * ymid > 0)
{
a = xmid
f.a = ymid
}else{
b = xmid
f.b = ymid
}
}
root = (a+b)/2
return(root)
}
f = function(x) {x^2 - 1}
bisection(f, .5, 1.25, tol=1e-3)
bisection(f, .5, 1.25, tol=1e-6)
bisection(f, .5, 1.25, tol=1e-9)
f = function(x){x^3 - x}
bisection(f, -2, 1.25, tol=1e-6)
bisection(f, -.5, 1.25, tol=1e-6)
bisection(f, -2, 1.25, tol=1e-6)
bisection = function(f, a, b, tol = 1e-3, m = 100)
{
iter = 0
f.a = f(a)
f.b = f(b)
while(abs(b - a) > tol)
{
iter = iter + 1
if(iter > m)
{
warning("iteration maximum exceeded")
break
}
xmid = (a+b)/2
ymid = f(xmid)
if(f.a * ymid > 0)
{
a = xmid
f.a = ymid
}else{
b = xmid
f.b = ymid
}
}
root = (a+b)/2
return(root)
}
f = function(x) {x^2 - 1}
bisection(f, .5, 1.25, tol=1e-3)
bisection(f, .5, 1.25, tol=1e-6)
bisection(f, .5, 1.25, tol=1e-9)
f = function(x){x^3 - x}
bisection(f, -2, 1.25, tol=1e-6)
bisection(f, -.5, 1.25, tol=1e-6)
bisection(f, -2, 1.25, tol=1e-6) # is this a typo? its the same as the first
bisection(sin, 1, 7, tol=1e-6)
bisection(sin, -50, 100, tol=1e-6)
bisection(sin, -1000, 2000, tol=1e-6)
bisection = function(f, a, b, tol = 1e-3, m = 100)
{
iter = 0
f.a = f(a)
f.b = f(b)
while(abs(b - a) > tol)
{
iter = iter + 1
if(iter > m)
{
warning("iteration maximum exceeded")
break
}
xmid = (a+b)/2
ymid = f(xmid)
if(f.a * ymid > 0)
{
a = xmid
f.a = ymid
}else{
b = xmid
f.b = ymid
}
}
root = (a+b)/2
return(root)
}
f = function(x) {x^2 - 1}
bisection(f, .5, 1.25, tol=1e-3)
bisection(f, .5, 1.25, tol=1e-6)
bisection(f, .5, 1.25, tol=1e-9)
f = function(x){x^3 - x}
bisection(f, -2, 1.25, tol=1e-6)
bisection(f, -.5, 1.25, tol=1e-6)
bisection(f, -2, 1.25, tol=1e-6) # is this a typo? its the same as the first
bisection(sin, 1, 7, tol=1e-6)
bisection(sin, -50, 100, tol=1e-6)
bisection(sin, -1000, 2000, tol=1e-6)
bisection(tan, 1, 2)
bisection(tan, -1, 1)
knitr::opts_chunk$set(echo = TRUE)
newton = function(f, fp, x, tol = 1e-3, m = 100)
{
iter = 0
oldx = x
x = oldx + 10 * tol
while(abs(x-oldx) > tol)
{
iter = iter + 1
if(iter > m)
stop("No solution found")
oldx = x
x = x - f(x)/fp(x)
}
return(x)
}
newton = function(f, fp, x, tol = 1e-3, m = 100)
{
iter = 0
oldx = x
x = oldx + 10 * tol
while(abs(x-oldx) > tol)
{
iter = iter + 1
if(iter > m)
stop("No solution found")
oldx = x
x = x - f(x)/fp(x)
}
return(x)
}
f = function(x) {x^2 - 1}
fp = function(x) {2*x}
newton(f, fp, 1.25, tol = 1e-3)
newton(f, fp, -1100, tol = 1e-6)
newton(f, fp, 1e6, tol = 1e-9)
newton = function(f, fp, x, tol = 1e-3, m = 100)
{
iter = 0
oldx = x
x = oldx + 10 * tol
while(abs(x-oldx) > tol)
{
iter = iter + 1
if(iter > m)
stop("No solution found")
oldx = x
x = x - f(x)/fp(x)
}
return(x)
}
f = function(x) {x^2 - 1}
fp = function(x) {2*x}
newton(f, fp, 1.25, tol = 1e-3)
newton(f, fp, -1100, tol = 1e-6)
newton(f, fp, 1e6, tol = 1e-9)
f = function(x) {x^2 - 2*x + 1}
fp = function(x) {2*x - 2}
newton(f, fp, 1.25, tol = 1e-3)
newton(f, fp, -1100, tol = 1e-6)
newton(f, fp, 1e6, tol = 1e-9)
newton = function(f, fp, x, tol = 1e-3, m = 100)
{
iter = 0
oldx = x
x = oldx + 10 * tol
while(abs(x-oldx) > tol)
{
iter = iter + 1
if(iter > m)
stop("No solution found")
oldx = x
x = x - f(x)/fp(x)
}
return(x)
}
f = function(x) {x^2 - 1}
fp = function(x) {2*x}
newton(f, fp, 1.25, tol = 1e-3)
newton(f, fp, -1100, tol = 1e-6)
newton(f, fp, 1e6, tol = 1e-9)
f = function(x) {x^2 - 2*x + 1}
fp = function(x) {2*x - 2}
newton(f, fp, 1.25, tol = 1e-3)
newton(f, fp, -1100, tol = 1e-6)
newton(f, fp, 1e6, tol = 1e-9)
newton(f, fp, 0, tol = 1e-3)
secant = function(f, x, tol = 1e-3, m = 100)
{
i = 0
oldx = x
oldfx = f(x)
x = oldx + 10*tol
while(abs(x - oldx) > tol)
{
i = i+1
if(i>m)
stop("No solution found")
fx = f(x)
newx = x - fx * ((x - oldx)/(fx - oldfx))
oldx = x
oldfx = fx
x = newx
}
return(x)
}
help()
